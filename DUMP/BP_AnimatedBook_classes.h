// BlueprintGeneratedClass BP_AnimatedBook.BP_AnimatedBook_C
// Size: 0xb5c (Inherited: 0x220)
struct ABP_AnimatedBook_C : AActor {
	struct FPointerToUberGraphFrame UberGraphFrame; // 0x220(0x08)
	struct UWidgetComponent* Widget_CoverBack; // 0x228(0x08)
	struct UWidgetComponent* Widget_BlockFront; // 0x230(0x08)
	struct UWidgetComponent* Widget_PageBack; // 0x238(0x08)
	struct UWidgetComponent* Widget_PageFront; // 0x240(0x08)
	struct UWidgetComponent* Widget_BlockBack; // 0x248(0x08)
	struct UWidgetComponent* Widget_CoverFront; // 0x250(0x08)
	struct USceneComponent* EphemeraAnchor_Front; // 0x258(0x08)
	struct USceneComponent* EphemeraAnchor_Back; // 0x260(0x08)
	struct USceneComponent* CoverBack_Center; // 0x268(0x08)
	struct USceneComponent* CoverSpine_Center; // 0x270(0x08)
	struct UStaticMeshComponent* PreviewLayoutBack; // 0x278(0x08)
	struct UStaticMeshComponent* PreviewLayoutFront; // 0x280(0x08)
	struct USceneComponent* CoverFront_Center; // 0x288(0x08)
	struct USceneComponent* GroundOffset; // 0x290(0x08)
	struct USceneComponent* Centre; // 0x298(0x08)
	struct USceneComponent* IK_SpineCenter; // 0x2a0(0x08)
	struct UStaticMeshComponent* SpineBack; // 0x2a8(0x08)
	struct UMediaSoundComponent* MediaSound; // 0x2b0(0x08)
	struct USceneComponent* DirectionReference; // 0x2b8(0x08)
	struct USceneComponent* SpineAttachPoint_Back; // 0x2c0(0x08)
	struct USceneComponent* SpineAttachPoint_Front; // 0x2c8(0x08)
	struct UStaticMeshComponent* BookCover_Front; // 0x2d0(0x08)
	struct UStaticMeshComponent* BookCover_Back; // 0x2d8(0x08)
	struct USceneComponent* PageBackRev_center; // 0x2e0(0x08)
	struct USceneComponent* PageFrontRev_center; // 0x2e8(0x08)
	struct USceneComponent* PageBack_center; // 0x2f0(0x08)
	struct USceneComponent* PageFront_center; // 0x2f8(0x08)
	struct USceneComponent* BlockBack_center; // 0x300(0x08)
	struct USceneComponent* BlockFront_center; // 0x308(0x08)
	struct USkeletalMeshComponent* PageBack; // 0x310(0x08)
	struct USkeletalMeshComponent* PageFront; // 0x318(0x08)
	struct USkeletalMeshComponent* BlockBack; // 0x320(0x08)
	struct USkeletalMeshComponent* BlockFront; // 0x328(0x08)
	struct USceneComponent* Ground; // 0x330(0x08)
	float EphemeraAnim_HeavySwing_07B0E9E44CB432BAC86254A5215B952F; // 0x338(0x04)
	float EphemeraAnim_Swing_07B0E9E44CB432BAC86254A5215B952F; // 0x33c(0x04)
	float EphemeraAnim_Closing_07B0E9E44CB432BAC86254A5215B952F; // 0x340(0x04)
	float EphemeraAnim_Unfold_07B0E9E44CB432BAC86254A5215B952F; // 0x344(0x04)
	float EphemeraAnim_Flutter_07B0E9E44CB432BAC86254A5215B952F; // 0x348(0x04)
	enum class ETimelineDirection EphemeraAnim__Direction_07B0E9E44CB432BAC86254A5215B952F; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)
	struct UTimelineComponent* EphemeraAnim; // 0x350(0x08)
	float Open_The_Book_CoverReverse_071DB0AA4544D22560BCADB34983FFCB; // 0x358(0x04)
	float Open_The_Book_Cover_071DB0AA4544D22560BCADB34983FFCB; // 0x35c(0x04)
	float Open_The_Book_0__1_EaseInSnapOut_071DB0AA4544D22560BCADB34983FFCB; // 0x360(0x04)
	float Open_The_Book_0__1_EaseInBounceOut_071DB0AA4544D22560BCADB34983FFCB; // 0x364(0x04)
	float Open_The_Book_1_sec_0__1_EaseIn_Out_071DB0AA4544D22560BCADB34983FFCB; // 0x368(0x04)
	enum class ETimelineDirection Open_The_Book__Direction_071DB0AA4544D22560BCADB34983FFCB; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	struct UTimelineComponent* Open The Book; // 0x370(0x08)
	float PageTurn_EphemeraSquash_B9ECD6F6492EA4F1F1727FB534A9C856; // 0x378(0x04)
	float PageTurn_Progress_B9ECD6F6492EA4F1F1727FB534A9C856; // 0x37c(0x04)
	float PageTurn_NoDamping_B9ECD6F6492EA4F1F1727FB534A9C856; // 0x380(0x04)
	float PageTurn_PageTurn_B9ECD6F6492EA4F1F1727FB534A9C856; // 0x384(0x04)
	enum class ETimelineDirection PageTurn__Direction_B9ECD6F6492EA4F1F1727FB534A9C856; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct UTimelineComponent* PageTurn; // 0x390(0x08)
	bool PageTurnBackwards; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	int32_t TotalPages; // 0x39c(0x04)
	float WhereDoesSpineBreak_Scratch; // 0x3a0(0x04)
	float WhereDoesSpineBreak; // 0x3a4(0x04)
	float BookOpenCurrentAmount; // 0x3a8(0x04)
	float ThinBoost; // 0x3ac(0x04)
	bool READY TO PACKAGE; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	float Book Proportions; // 0x3b4(0x04)
	float BookThickness; // 0x3b8(0x04)
	float PageOpenAmount; // 0x3bc(0x04)
	bool NewPageRevealed; // 0x3c0(0x01)
	bool PageTurnInProgress; // 0x3c1(0x01)
	bool PageTurnQueued; // 0x3c2(0x01)
	char pad_3C3[0x1]; // 0x3c3(0x01)
	float CoverThickness; // 0x3c4(0x04)
	float BookOpen_TargetAmount; // 0x3c8(0x04)
	int32_t PageToOpenTo; // 0x3cc(0x04)
	int32_t CurrentPage; // 0x3d0(0x04)
	bool CenterOnSpine; // 0x3d4(0x01)
	bool AllowPageTurnsMidTurn; // 0x3d5(0x01)
	bool PageTurnDirectionQueued; // 0x3d6(0x01)
	char pad_3D7[0x1]; // 0x3d7(0x01)
	float PageTurnSpeedQueued; // 0x3d8(0x04)
	bool Damped PageTurns; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	struct TArray<struct FS_PageInfo> Individual Pages; // 0x3e0(0x10)
	struct FS_Typography Page Typography Settings; // 0x3f0(0xa0)
	struct UW_Page_C* W_BlockFront; // 0x490(0x08)
	struct UW_Page_C* W_BlockBack; // 0x498(0x08)
	struct UW_Page_C* W_PageFront; // 0x4a0(0x08)
	struct UW_Page_C* W_PageBack; // 0x4a8(0x08)
	struct UW_Cover_C* W_CoverFront; // 0x4b0(0x08)
	struct TArray<struct UW_Page_C*> PageWidgets; // 0x4b8(0x10)
	struct UMaterialInstanceDynamic* PageFront_DMI; // 0x4c8(0x08)
	struct UMaterialInstanceDynamic* PageBack_DMI; // 0x4d0(0x08)
	struct UMaterialInstanceDynamic* BlockFrontEdge_DMI; // 0x4d8(0x08)
	struct UMaterialInstanceDynamic* BlockBackEdge_DMI; // 0x4e0(0x08)
	struct UMaterialInstanceDynamic* BlockFrontBinding_DMI; // 0x4e8(0x08)
	struct UMaterialInstanceDynamic* BlockBackBinding_DMI; // 0x4f0(0x08)
	struct UMaterialInterface* PaperMaterial; // 0x4f8(0x08)
	int32_t NumberOfViewablePages; // 0x500(0x04)
	struct FVector2D PagePictureDrawSize; // 0x504(0x08)
	enum class E_PagePaper Page Paper Type; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	struct FLinearColor PagePaperTint; // 0x510(0x10)
	bool gold leaf page edges; // 0x520(0x01)
	enum class E_PageDirt Page Dirt & Markings; // 0x521(0x01)
	char pad_522[0x2]; // 0x522(0x02)
	float Page Dirt Strength; // 0x524(0x04)
	int32_t NonViewableExtraPagesAtFront; // 0x528(0x04)
	int32_t NonViewableExtraPagesAtBack; // 0x52c(0x04)
	struct FLinearColor EndpapersTint; // 0x530(0x10)
	bool Keep Empty-Title Space; // 0x540(0x01)
	bool Show Page-numbers; // 0x541(0x01)
	bool Center Page-numbers; // 0x542(0x01)
	char pad_543[0x1]; // 0x543(0x01)
	int32_t Page-numberFontSize; // 0x544(0x04)
	int32_t AddToPageNumberValue; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct UMediaPlayer* MediaPlayer; // 0x550(0x08)
	bool MediaPlayerPlaying; // 0x558(0x01)
	char pad_559[0x3]; // 0x559(0x03)
	float BookOpenStart; // 0x55c(0x04)
	float Multiplier; // 0x560(0x04)
	bool BookContainsMovies; // 0x564(0x01)
	char pad_565[0x3]; // 0x565(0x03)
	int32_t BookOpeningStyle; // 0x568(0x04)
	float SpineAngle; // 0x56c(0x04)
	float CoverOpenAmount; // 0x570(0x04)
	bool CoversOpenAheadOfPagesSlightly; // 0x574(0x01)
	char pad_575[0x3]; // 0x575(0x03)
	float ThinPageOffset; // 0x578(0x04)
	enum class E_CoverStyle Cover Material Presets; // 0x57c(0x01)
	char pad_57D[0x3]; // 0x57d(0x03)
	struct FLinearColor CoverColorTint; // 0x580(0x10)
	struct FLinearColor CoverDetailingTint; // 0x590(0x10)
	float CoverDetailingMetallic; // 0x5a0(0x04)
	float CoverLetteringMetallic; // 0x5a4(0x04)
	float CoverLetteringGloss; // 0x5a8(0x04)
	bool Use Rounded Spine; // 0x5ac(0x01)
	char pad_5AD[0x3]; // 0x5ad(0x03)
	float Cover Dirt Strength; // 0x5b0(0x04)
	bool Use UMG Bookcover; // 0x5b4(0x01)
	char pad_5B5[0x3]; // 0x5b5(0x03)
	struct FS_Typography Front-cover Typography Settings; // 0x5b8(0xa0)
	struct FS_PageInfo Front-cover Text; // 0x658(0x68)
	struct FS_SpineInfo Spine-cover Text; // 0x6c0(0x70)
	bool Enable UMG back-cover; // 0x730(0x01)
	char pad_731[0x7]; // 0x731(0x07)
	struct FS_Typography Back-cover Typography Settings; // 0x738(0xa0)
	struct FS_PageInfo Back-cover Text; // 0x7d8(0x68)
	struct UMaterialInstanceDynamic* CoverFront_DMI; // 0x840(0x08)
	struct UMaterialInstanceDynamic* CoverBack_DMI; // 0x848(0x08)
	enum class E_PageRes PageResolution; // 0x850(0x01)
	char pad_851[0x7]; // 0x851(0x07)
	struct UW_Cover_C* W_CoverRear; // 0x858(0x08)
	bool Close book when last page turned; // 0x860(0x01)
	char pad_861[0x7]; // 0x861(0x07)
	struct TArray<struct FS_Ephemera> Ephemera; // 0x868(0x10)
	float PageturnThickness; // 0x878(0x04)
	bool BookContainsEphemera; // 0x87c(0x01)
	char pad_87D[0x3]; // 0x87d(0x03)
	struct TArray<struct FS_Ephemera> EphemeraOpening; // 0x880(0x10)
	struct TArray<struct FS_Ephemera> EphemeraClosing; // 0x890(0x10)
	float EphemeraDepthFront; // 0x8a0(0x04)
	float EphemeraDepthBack; // 0x8a4(0x04)
	bool BookOpeningInProgress; // 0x8a8(0x01)
	bool HalfwayMarkReached; // 0x8a9(0x01)
	char pad_8AA[0x2]; // 0x8aa(0x02)
	float Page division; // 0x8ac(0x04)
	bool NoViewablePages; // 0x8b0(0x01)
	char pad_8B1[0x3]; // 0x8b1(0x03)
	float MediaVolume; // 0x8b4(0x04)
	float VoiceOverVolume; // 0x8b8(0x04)
	enum class E_CoverPresets Add detail meshes to bookcover; // 0x8bc(0x01)
	char pad_8BD[0x3]; // 0x8bd(0x03)
	struct TArray<struct FS_CoverDecor> Custom Bookcover Detail Meshes; // 0x8c0(0x10)
	struct TArray<struct FS_CoverDecor> Decoration_AncientIron; // 0x8d0(0x10)
	struct TArray<struct FS_CoverDecor> Decoration_MagicBrass; // 0x8e0(0x10)
	struct TArray<struct FS_CoverDecor> Decoration_Steampunk; // 0x8f0(0x10)
	struct TArray<struct FS_CoverDecor> Decoration_Storybook; // 0x900(0x10)
	struct TArray<struct FS_CoverDecor> Decoration_None; // 0x910(0x10)
	struct TArray<struct UStaticMeshComponent*> MySpawnedMeshes; // 0x920(0x10)
	struct UTexture* ScratchTexture; // 0x930(0x08)
	struct TArray<struct FS_CoverDecor> Decoration_Simple; // 0x938(0x10)
	struct UMaterialInstance* BackCover Material; // 0x948(0x08)
	struct UMaterialInstance* Cover Material; // 0x950(0x08)
	struct UMaterialInstance* Override CoverMaterial; // 0x958(0x08)
	struct UMaterialInstance* Override BackCoverMaterial; // 0x960(0x08)
	struct UTexture* Override DirtMap Cover; // 0x968(0x08)
	struct UTexture* Override DirtMap BackCover; // 0x970(0x08)
	struct UTexture* Override PageTextureMap; // 0x978(0x08)
	struct UTexture* Override PageNormalMap; // 0x980(0x08)
	struct UMaterialInstanceDynamic* BlockFront_DMI; // 0x988(0x08)
	struct UMaterialInstanceDynamic* Endpapers_DMI; // 0x990(0x08)
	struct UTexture* Override DirtMap Page; // 0x998(0x08)
	struct UTexture* Override DirtMask Page; // 0x9a0(0x08)
	struct UTexture* Override Endpapers NormalMap; // 0x9a8(0x08)
	struct UTexture* Override Endpapers TextureMap; // 0x9b0(0x08)
	struct UTexture* Override EndpapersBack TextureMap; // 0x9b8(0x08)
	enum class ECollisionEnabled EnableCollision; // 0x9c0(0x01)
	char pad_9C1[0x7]; // 0x9c1(0x07)
	struct UMaterialInstanceDynamic* BlockBack_DMI; // 0x9c8(0x08)
	struct FMargin Default Margins; // 0x9d0(0x10)
	struct FVector2D CoverPictureDrawSize; // 0x9e0(0x08)
	struct TArray<struct FRotator> EphemeraRotators; // 0x9e8(0x10)
	struct TArray<struct FS_Ephemera> EphemAnimOpening; // 0x9f8(0x10)
	struct TArray<struct FS_Ephemera> EphemAnimClosing; // 0xa08(0x10)
	float ScratchFloat; // 0xa18(0x04)
	bool UnfoldingEnabled; // 0xa1c(0x01)
	char pad_A1D[0x3]; // 0xa1d(0x03)
	struct TArray<float> EphemeraAnimAngle; // 0xa20(0x10)
	struct TArray<bool> EphemeraFlipped; // 0xa30(0x10)
	struct TArray<bool> EphemeraOnFlipPage; // 0xa40(0x10)
	struct TArray<struct FS_Ephemera> EphemeraOnTurningPage; // 0xa50(0x10)
	bool UnfoldingPaused; // 0xa60(0x01)
	bool InitInProgress; // 0xa61(0x01)
	char pad_A62[0x2]; // 0xa62(0x02)
	float SpeedAffectsPitch; // 0xa64(0x04)
	struct USoundBase* SoundPageTurning; // 0xa68(0x08)
	struct USoundBase* SoundBookOpening; // 0xa70(0x08)
	struct USoundBase* SoundBookClosing; // 0xa78(0x08)
	struct USoundBase* SoundSnapClosed; // 0xa80(0x08)
	bool JumpingToPage; // 0xa88(0x01)
	char pad_A89[0x3]; // 0xa89(0x03)
	int32_t QueuedPage; // 0xa8c(0x04)
	float QueuedBookOpenAmount; // 0xa90(0x04)
	struct FRandomStream Dirt_RandomStream; // 0xa94(0x08)
	int32_t AnimChopLength; // 0xa9c(0x04)
	float Animated WriteSpeed; // 0xaa0(0x04)
	bool AnimatedByManualTriggerOnly; // 0xaa4(0x01)
	char pad_AA5[0x3]; // 0xaa5(0x03)
	struct USoundBase* SoundTextAppearing; // 0xaa8(0x08)
	struct USoundBase* SoundPictureAppearing; // 0xab0(0x08)
	struct USoundAttenuation* Attenuation; // 0xab8(0x08)
	struct UAudioComponent* PageTurnSFX; // 0xac0(0x08)
	struct UAudioComponent* PictureFadeInSFX; // 0xac8(0x08)
	struct UAudioComponent* TextAnimSFX; // 0xad0(0x08)
	bool No Covers (faux paperback); // 0xad8(0x01)
	char pad_AD9[0x7]; // 0xad9(0x07)
	struct UMaterialInstanceDynamic* Spine_DMI; // 0xae0(0x08)
	struct UMaterialInstanceDynamic* Paperback_DMI; // 0xae8(0x08)
	struct TArray<struct USceneComponent*> MyAttachedEphemera; // 0xaf0(0x10)
	struct FMargin Default HeadingPadding; // 0xb00(0x10)
	struct FMargin Default PictureMargin; // 0xb10(0x10)
	struct UObject* Override MoviePlayer Material; // 0xb20(0x08)
	float RenderDelay; // 0xb28(0x04)
	char pad_B2C[0x4]; // 0xb2c(0x04)
	struct UMediaSource* CurrentMovieMedia; // 0xb30(0x08)
	bool Preview; // 0xb38(0x01)
	char pad_B39[0x3]; // 0xb39(0x03)
	int32_t Animated-NumberOfLettersToAdd; // 0xb3c(0x04)
	struct UAudioComponent* PageVO; // 0xb40(0x08)
	struct FMulticastInlineDelegate OnPageOpened; // 0xb48(0x10)
	int32_t OpenedPage; // 0xb58(0x04)

	void IsPageOpened(int32_t page, bool IsOpened); // Function BP_AnimatedBook.BP_AnimatedBook_C.IsPageOpened // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1395fe0
	bool IsBookClosed(); // Function BP_AnimatedBook.BP_AnimatedBook_C.IsBookClosed // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1395fe0
	void PrepFromEphemeras(struct TArray<struct FS_Ephemera> Array); // Function BP_AnimatedBook.BP_AnimatedBook_C.PrepFromEphemeras // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void SpawnEphemeraIfNone(); // Function BP_AnimatedBook.BP_AnimatedBook_C.SpawnEphemeraIfNone // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|TallyPages(bool RefreshPagesOnly); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|TallyPages // (Private|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|InitEphemera(bool ConstructionGraph); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|InitEphemera // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|UpdateCoverWidget(struct UW_Cover_C* Widget, int32_t PageToOpenTo, bool Set Layout Directly?, struct FS_PageInfo Layout to Directly Set); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|UpdateCoverWidget // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|CoverTypography(struct UW_Cover_C* Page Widget, struct FS_Typography TypographyOptions, struct FS_SpineInfo SpineLayout); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|CoverTypography // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|FinalizeEphemeraPos(bool Scale-Z Enabled); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|FinalizeEphemeraPos // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|PlaceEphemera(struct AActor* Actor, int32_t PageNumber, bool Flatten, struct FVector Offset, float Rotation, struct FVector Scale, int32_t Array Number, bool AbsolutePos, bool ScaleZenabled); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|PlaceEphemera // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|PrepEphemera(bool OnlyUnfoldAnims, bool PageturnNotBookOpen); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|PrepEphemera // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|TypographySettings(struct UW_Page_C* Page Widget, struct FS_Typography TypographyOptions); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|TypographySettings // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|SetBlockAngle(float BookOpenAmount, bool Page (NotBlock)); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|SetBlockAngle // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|OrientToGround(); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|OrientToGround // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|UpdateMorphTargets(float BookOpenAmount, float PageOpenAmount, bool Page(NotBlock), bool UpdateInvisiblePage); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|UpdateMorphTargets // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|StartAnyMovies(bool OnlyCheck, bool Movie Found); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|StartAnyMovies // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|UpdatePageWidget(struct UW_Page_C* Widget, int32_t PageToOpenTo, bool Set Layout Directly?, struct FS_PageInfo Layout to Directly Set, bool OnlyAnimatedText); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|UpdatePageWidget // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AniBook|Update Scene Coords(float Book Open Amount, struct USceneComponent* Page Scene, bool Back (Not Front) Block); // Function BP_AnimatedBook.BP_AnimatedBook_C.AniBook|Update Scene Coords // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void UserConstructionScript(); // Function BP_AnimatedBook.BP_AnimatedBook_C.UserConstructionScript // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void Open The Book__FinishedFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.Open The Book__FinishedFunc // (BlueprintEvent) // @ game+0x1395fe0
	void Open The Book__UpdateFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.Open The Book__UpdateFunc // (BlueprintEvent) // @ game+0x1395fe0
	void PageTurn__FinishedFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.PageTurn__FinishedFunc // (BlueprintEvent) // @ game+0x1395fe0
	void PageTurn__UpdateFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.PageTurn__UpdateFunc // (BlueprintEvent) // @ game+0x1395fe0
	void PageTurn__0.1& 0.9 linear__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.PageTurn__0.1& 0.9 linear__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void PageTurn__0.5__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.PageTurn__0.5__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void PageTurn__0.1 & 0.9 Damped__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.PageTurn__0.1 & 0.9 Damped__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnim__FinishedFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnim__FinishedFunc // (BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnim__UpdateFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnim__UpdateFunc // (BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnim__UnfoldStartSFX__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnim__UnfoldStartSFX__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnim__SwingTapSFX__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnim__SwingTapSFX__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnim__ClosingComplete__EventFunc(); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnim__ClosingComplete__EventFunc // (BlueprintEvent) // @ game+0x1395fe0
	void ReceiveBeginPlay(); // Function BP_AnimatedBook.BP_AnimatedBook_C.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x1395fe0
	void Open To Page(float Open how wide? (0-1), float Open how quickly? (seconds), int32_t Page to open to); // Function BP_AnimatedBook.BP_AnimatedBook_C.Open To Page // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void TurnThePage(bool Backwards, float HowQuickly? (Seconds)); // Function BP_AnimatedBook.BP_AnimatedBook_C.TurnThePage // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void ConstructionPreview(); // Function BP_AnimatedBook.BP_AnimatedBook_C.ConstructionPreview // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void First or Last Page Turned(); // Function BP_AnimatedBook.BP_AnimatedBook_C.First or Last Page Turned // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void OnMediaOpenFailed_Event(struct FString FailedUrl); // Function BP_AnimatedBook.BP_AnimatedBook_C.OnMediaOpenFailed_Event // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void RefreshEphemera(bool Detach (not destroy) orphaned Ephemera); // Function BP_AnimatedBook.BP_AnimatedBook_C.RefreshEphemera // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void RefreshPages(); // Function BP_AnimatedBook.BP_AnimatedBook_C.RefreshPages // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void EphemeraAnimation(bool OnlyUnfold, bool BookClosing, bool BookOpening, bool No Unfold); // Function BP_AnimatedBook.BP_AnimatedBook_C.EphemeraAnimation // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void JumpToPage(int32_t PageToJumpTo, float HowQuickly? (Seconds)); // Function BP_AnimatedBook.BP_AnimatedBook_C.JumpToPage // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void Update Page(int32_t Page number, struct FText Replace Title, struct FText Replace Text, struct UTexture* Replace Picture, struct UMediaSource* Replace Movie); // Function BP_AnimatedBook.BP_AnimatedBook_C.Update Page // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void Animate Text(int32_t Page To Animate, bool Manual Trigger); // Function BP_AnimatedBook.BP_AnimatedBook_C.Animate Text // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void Reset Text Animation(int32_t Page number, bool All Pages); // Function BP_AnimatedBook.BP_AnimatedBook_C.Reset Text Animation // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void AnimatedTextTrigger(); // Function BP_AnimatedBook.BP_AnimatedBook_C.AnimatedTextTrigger // (BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
	void ExecuteUbergraph_BP_AnimatedBook(int32_t EntryPoint); // Function BP_AnimatedBook.BP_AnimatedBook_C.ExecuteUbergraph_BP_AnimatedBook // (Final|UbergraphFunction|HasDefaults) // @ game+0x1395fe0
	void OnPageOpened__DelegateSignature(int32_t page, bool bJump); // Function BP_AnimatedBook.BP_AnimatedBook_C.OnPageOpened__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1395fe0
};

