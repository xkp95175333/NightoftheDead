// Class VictoryBPLibrary.TKMathFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UTKMathFunctionLibrary : UBlueprintFunctionLibrary {

	struct FVector VectorRadiansToDegrees(struct FVector RadVector); // Function VictoryBPLibrary.TKMathFunctionLibrary.VectorRadiansToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb12d90
	struct FVector VectorDegreesToRadians(struct FVector DegVector); // Function VictoryBPLibrary.TKMathFunctionLibrary.VectorDegreesToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb12cf0
	bool SphereBoxIntersection(struct FVector SphereOrigin, float SphereRadius, struct FVector BoxOrigin, struct FVector BoxExtent); // Function VictoryBPLibrary.TKMathFunctionLibrary.SphereBoxIntersection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb10ba0
	float SignedDistancePlanePoint(struct FVector PlaneNormal, struct FVector planePoint, struct FVector Point); // Function VictoryBPLibrary.TKMathFunctionLibrary.SignedDistancePlanePoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb10870
	struct FVector SetVectorLength(struct FVector A, float Size); // Function VictoryBPLibrary.TKMathFunctionLibrary.SetVectorLength // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb10780
	void SetCenterOfMassOffset(struct UPrimitiveComponent* Target, struct FVector Offset, struct FName BoneName); // Function VictoryBPLibrary.TKMathFunctionLibrary.SetCenterOfMassOffset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb104e0
	int32_t RoundToUpperMultiple(int32_t A, int32_t Multiple, bool skipSelf); // Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToUpperMultiple // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0fca0
	int32_t RoundToNearestMultiple(int32_t A, int32_t Multiple); // Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToNearestMultiple // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0fbd0
	int32_t RoundToLowerMultiple(int32_t A, int32_t Multiple, bool skipSelf); // Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToLowerMultiple // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0fad0
	struct FVector ProjectPointOnLine(struct FVector LineOrigin, struct FVector LineDirection, struct FVector Point); // Function VictoryBPLibrary.TKMathFunctionLibrary.ProjectPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0ebc0
	int32_t PointOnWhichSideOfLineSegment(struct FVector LinePoint1, struct FVector LinePoint2, struct FVector Point); // Function VictoryBPLibrary.TKMathFunctionLibrary.PointOnWhichSideOfLineSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0ea80
	struct FVector2D NegateVector2D(struct FVector2D A); // Function VictoryBPLibrary.TKMathFunctionLibrary.NegateVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0d420
	int32_t NegateInt(int32_t A); // Function VictoryBPLibrary.TKMathFunctionLibrary.NegateInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0d390
	float NegateFloat(float A); // Function VictoryBPLibrary.TKMathFunctionLibrary.NegateFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0d300
	bool LineToLineIntersection(struct FVector IntersectionPoint, struct FVector LinePoint1, struct FVector LineDir1, struct FVector LinePoint2, struct FVector LineDir2); // Function VictoryBPLibrary.TKMathFunctionLibrary.LineToLineIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0c380
	bool LineExtentBoxIntersection(struct FBox InBox, struct FVector Start, struct FVector End, struct FVector Extent, struct FVector HitLocation, struct FVector HitNormal, float HitTime); // Function VictoryBPLibrary.TKMathFunctionLibrary.LineExtentBoxIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0c0f0
	bool IsPowerOfTwo(int32_t X); // Function VictoryBPLibrary.TKMathFunctionLibrary.IsPowerOfTwo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0b590
	bool IsPointInsideBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function VictoryBPLibrary.TKMathFunctionLibrary.IsPointInsideBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0b300
	bool IsMultipleOf(int32_t A, int32_t Multiple); // Function VictoryBPLibrary.TKMathFunctionLibrary.IsMultipleOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0b230
	bool IsLineInsideSphere(struct FVector LineStart, struct FVector LineDir, float LineLength, struct FVector SphereOrigin, float SphereRadius); // Function VictoryBPLibrary.TKMathFunctionLibrary.IsLineInsideSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0b060
	bool IsEvenNumber(float A); // Function VictoryBPLibrary.TKMathFunctionLibrary.IsEvenNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0afe0
	struct FVector GridSnap(struct FVector A, float Grid); // Function VictoryBPLibrary.TKMathFunctionLibrary.GridSnap // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0aa80
	struct FVector GetVelocityAtPoint(struct UPrimitiveComponent* Target, struct FVector Point, struct FName BoneName, bool DrawDebugInfo); // Function VictoryBPLibrary.TKMathFunctionLibrary.GetVelocityAtPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb0a460
	int32_t GetConsoleVariableInt(struct FString VariableName); // Function VictoryBPLibrary.TKMathFunctionLibrary.GetConsoleVariableInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09290
	float GetConsoleVariableFloat(struct FString VariableName); // Function VictoryBPLibrary.TKMathFunctionLibrary.GetConsoleVariableFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb091a0
	float ConvertPhysicsLinearVelocity(struct FVector Velocity, enum class ESpeedUnit SpeedUnit); // Function VictoryBPLibrary.TKMathFunctionLibrary.ConvertPhysicsLinearVelocity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb066f0
	void ConvertAnchorToAnchor(struct UObject* WorldContextObject, struct FAnchors CurrentAnchor, struct FMargin Offsets, struct FAnchors TargetAnchor, struct FMargin ConvertedOffsets); // Function VictoryBPLibrary.TKMathFunctionLibrary.ConvertAnchorToAnchor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb06520
	bool ClosestPointsOnTwoLines(struct FVector closestPointLine1, struct FVector closestPointLine2, struct FVector LinePoint1, struct FVector lineVec1, struct FVector LinePoint2, struct FVector lineVec2); // Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointsOnTwoLines // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb059e0
	void ClosestPointsOfLineSegments(struct FVector Line1Start, struct FVector Line1End, struct FVector Line2Start, struct FVector Line2End, struct FVector LinePoint1, struct FVector LinePoint2); // Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointsOfLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb057c0
	struct FVector ClosestPointOnSphereToLine(struct FVector SphereOrigin, float SphereRadius, struct FVector LineOrigin, struct FVector LineDir); // Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointOnSphereToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb05630
	struct FVector ClosestPointOnLineSeqment(struct FVector Point, struct FVector LineStart, struct FVector LineEnd); // Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointOnLineSeqment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb054e0
	bool AreLineSegmentsCrossing(struct FVector pointA1, struct FVector pointA2, struct FVector pointB1, struct FVector pointB2); // Function VictoryBPLibrary.TKMathFunctionLibrary.AreLineSegmentsCrossing // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb04970
};

// Class VictoryBPLibrary.VictoryBPFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVictoryBPFunctionLibrary : UBlueprintFunctionLibrary {

	bool WorldType__InPIEWorld(struct UObject* WorldContextObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InPIEWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb18160
	bool WorldType__InGameInstanceWorld(struct UObject* WorldContextObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InGameInstanceWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb180d0
	bool WorldType__InEditorWorld(struct UObject* WorldContextObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InEditorWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb18040
	bool WidgetIsChildOf(struct UWidget* ChildWidget, struct UWidget* PossibleParent); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetIsChildOf // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0xb17f70
	struct UUserWidget* WidgetGetParentOfClass(struct UWidget* ChildWidget, struct UUserWidget* WidgetClass); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetParentOfClass // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0xb17ea0
	void WidgetGetChildrenOfClass(struct UWidget* ParentWidget, struct TArray<struct UUserWidget*> ChildWidgets, struct UUserWidget* WidgetClass, bool bImmediateOnly); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetChildrenOfClass // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb17d30
	void Visibility__GetRenderedActors(struct UObject* WorldContextObject, struct TArray<struct AActor*> CurrentlyRenderedActors, float MinRecentTime); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Visibility__GetRenderedActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb17c00
	void Visibility__GetNotRenderedActors(struct UObject* WorldContextObject, struct TArray<struct AActor*> CurrentlyNotRenderedActors, float MinRecentTime); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Visibility__GetNotRenderedActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb17ad0
	bool ViewportPositionDeproject(struct UObject* WorldContextObject, struct FVector2D ViewportPosition, struct FVector OutWorldOrigin, struct FVector OutWorldDirection); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.ViewportPositionDeproject // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb17530
	bool Viewport__SetMousePosition(struct APlayerController* ThePC, float PosX, float PosY); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__SetMousePosition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb179b0
	bool Viewport__GetMousePosition(struct APlayerController* ThePC, float PosX, float PosY); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetMousePosition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb17890
	bool Viewport__GetCenterOfViewport(struct APlayerController* ThePC, float PosX, float PosY); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetCenterOfViewport // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb17770
	bool Viewport__EnableWorldRendering(struct APlayerController* ThePC, bool RenderTheWorld); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__EnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb176a0
	bool VictorySoundVolumeChange(struct USoundClass* SoundClassObject, float NewVolume); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySoundVolumeChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb165d0
	void VictorySortIntArray(struct TArray<int32_t> IntArray, struct TArray<int32_t> IntArrayRef); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb164c0
	void VictorySortFloatArray(struct TArray<float> FloatArray, struct TArray<float> FloatArrayRef); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb163b0
	void VictorySimulateMouseWheel(float Delta); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateMouseWheel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb16320
	void VictorySimulateKeyPress(struct APlayerController* ThePC, struct FKey Key, enum class EInputEvent EventType); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateKeyPress // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb161c0
	void VictorySetCustomConfigVar_Vector2D(struct FString SectionName, struct FString VariableName, struct FVector2D Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb15e60
	void VictorySetCustomConfigVar_Vector(struct FString SectionName, struct FString VariableName, struct FVector Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb16000
	void VictorySetCustomConfigVar_String(struct FString SectionName, struct FString VariableName, struct FString Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_String // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb15c70
	void VictorySetCustomConfigVar_Rotator(struct FString SectionName, struct FString VariableName, struct FRotator Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb15ab0
	void VictorySetCustomConfigVar_Int(struct FString SectionName, struct FString VariableName, int32_t Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Int // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb15910
	void VictorySetCustomConfigVar_Float(struct FString SectionName, struct FString VariableName, float Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Float // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb15760
	void VictorySetCustomConfigVar_Color(struct FString SectionName, struct FString VariableName, struct FLinearColor Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb155b0
	void VictorySetCustomConfigVar_Bool(struct FString SectionName, struct FString VariableName, bool Value); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Bool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb15400
	bool VictoryPhysics_UpdateAngularDamping(struct UPrimitiveComponent* CompToUpdate, float NewAngularDamping); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPhysics_UpdateAngularDamping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb15330
	struct FString VictoryPaths__WindowsNoEditorDir(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__WindowsNoEditorDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb152b0
	struct FString VictoryPaths__Win64Dir_BinaryLocation(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__Win64Dir_BinaryLocation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb15230
	struct FString VictoryPaths__ScreenShotsDir(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__ScreenShotsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb151b0
	struct FString VictoryPaths__SavedDir(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__SavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb15130
	struct FString VictoryPaths__LogsDir(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__LogsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb150b0
	struct FString VictoryPaths__GameRootDirectory(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__GameRootDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb15030
	struct FString VictoryPaths__ConfigDir(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__ConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb14fb0
	struct ULevelStreaming* VictoryLoadLevelInstance(struct UObject* WorldContextObject, struct FString MapFolderOffOfContent, struct FString LevelName, int32_t InstanceNumber, struct FVector Location, struct FRotator Rotation, bool Success); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryLoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb14cd0
	void VictoryISM_GetAllVictoryISMActors(struct UObject* WorldContextObject, struct TArray<struct AVictoryISM*> Out); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryISM_GetAllVictoryISMActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb14920
	void VictoryISM_ConvertToVictoryISMActors(struct UObject* WorldContextObject, struct AActor* ActorClass, struct TArray<struct AVictoryISM*> CreatedISMActors, bool DestroyOriginalActors, int32_t MinCountToCreateISM); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryISM_ConvertToVictoryISMActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb14760
	bool VictoryIsApplicationRunning(int32_t ProcessId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIsApplicationRunning // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb14c40
	void VictoryIntPlusEquals(int32_t Int, int32_t Add, int32_t IntOut); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntPlusEquals // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb14b20
	void VictoryIntMinusEquals(int32_t Int, int32_t Sub, int32_t IntOut); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntMinusEquals // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb14a00
	float VictoryGetSoundVolume(struct USoundClass* SoundClassObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetSoundVolume // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb146d0
	struct FVector2D VictoryGetCustomConfigVar_Vector2D(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb14340
	struct FVector VictoryGetCustomConfigVar_Vector(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb14500
	struct FString VictoryGetCustomConfigVar_String(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_String // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb14140
	struct FRotator VictoryGetCustomConfigVar_Rotator(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb13f70
	int32_t VictoryGetCustomConfigVar_Int(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Int // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb13db0
	float VictoryGetCustomConfigVar_Float(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb13bf0
	struct FLinearColor VictoryGetCustomConfigVar_Color(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Color // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb13a20
	bool VictoryGetCustomConfigVar_Bool(struct FString SectionName, struct FString VariableName, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Bool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb13860
	struct FString VictoryGetApplicationName(int32_t ProcessId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetApplicationName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb13780
	void VictoryFloatPlusEquals(float Float, float Add, float FloatOut); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatPlusEquals // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb13660
	void VictoryFloatMinusEquals(float Float, float Sub, float FloatOut); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatMinusEquals // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb13540
	bool VictoryDestructible_DestroyChunk(struct UDestructibleComponent* DestructibleComp, int32_t HitItem); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryDestructible_DestroyChunk // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb13470
	void VictoryCreateProc(int32_t ProcessId, struct FString FullPathOfProgramToRun, struct TArray<struct FString> CommandlineArgs, bool Detach, bool Hidden, int32_t Priority, struct FString OptionalWorkingDirectory); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryCreateProc // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb130e0
	void VictoryAppendInline(struct FString String, struct FString ToAppend, struct FString Result, bool AppendNewline); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryAppendInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb12f00
	struct FString Victory_SecondsToHoursMinutesSeconds(float Seconds, bool TrimZeroes); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SecondsToHoursMinutesSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb17410
	void Victory_SaveStringToOSClipboard(struct FString ToClipboard); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SaveStringToOSClipboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb17380
	bool Victory_SavePixels(struct FString FullFilePath, int32_t Width, int32_t Height, struct TArray<struct FLinearColor> ImagePixels, bool SaveAsBMP, bool SRGB, struct FString ErrorString); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SavePixels // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb17110
	void Victory_GetStringFromOSClipboard(struct FString FromClipboard); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetStringFromOSClipboard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb16ea0
	bool Victory_GetPixelsArrayFromT2D(struct UTexture2D* T2D, int32_t TextureWidth, int32_t TextureHeight, struct TArray<struct FLinearColor> PixelArray); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelsArrayFromT2D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb16d20
	bool Victory_GetPixelFromT2D(struct UTexture2D* T2D, int32_t X, int32_t Y, struct FLinearColor PixelColor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelFromT2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb16bd0
	struct FString Victory_GetGRHIAdapterName(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGRHIAdapterName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb16b10
	void Victory_GetGPUInfo(struct FString DeviceDescription, struct FString Provider, struct FString DriverVersion, struct FString DriverDate); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGPUInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb16940
	struct FString Victory_GetGPUBrand(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGPUBrand // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb168d0
	bool Victory_Get_Pixel(struct TArray<struct FLinearColor> Pixels, int32_t ImageHeight, int32_t X, int32_t Y, struct FLinearColor FoundColor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_Get_Pixel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb16f40
	enum class EPathFollowingRequestResult Victory_AI_MoveToWithFilter(struct APawn* Pawn, struct FVector Dest, struct UNavigationQueryFilter* FilterClass, float AcceptanceRadius, bool bProjectDestinationToNavigation, bool bStopOnOverlap, bool bCanStrafe); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_AI_MoveToWithFilter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb166a0
	float VerticalFOV(float HorizontalFOV, float AspectRatio); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.VerticalFOV // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb12e30
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb12b90
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb12a30
	void UTCToLocal(struct FDateTime UTCTime, struct FDateTime LocalTime); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.UTCToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb128c0
	void UnloadStreamingLevel(struct ULevelStreamingDynamic* LevelInstance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.UnloadStreamingLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb129b0
	struct FRotator TransformVectorToActorSpaceAngle(struct AActor* Actor, struct FVector InVector); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.TransformVectorToActorSpaceAngle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb127d0
	struct FVector TransformVectorToActorSpace(struct AActor* Actor, struct FVector InVector); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.TransformVectorToActorSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb126e0
	struct AActor* Traces__CharacterMeshTrace___ClosestSocket(struct UObject* WorldContextObject, struct AActor* TraceOwner, struct FVector TraceStart, struct FVector TraceEnd, struct FVector OutImpactPoint, struct FVector OutImpactNormal, struct FName ClosestSocketName, struct FVector SocketLocation, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Traces__CharacterMeshTrace___ClosestSocket // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb123e0
	struct AActor* Traces__CharacterMeshTrace___ClosestBone(struct AActor* TraceOwner, struct FVector TraceStart, struct FVector TraceEnd, struct FVector OutImpactPoint, struct FVector OutImpactNormal, struct FName ClosestBoneName, struct FVector ClosestBoneLocation, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Traces__CharacterMeshTrace___ClosestBone // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb12120
	bool TraceData__GetTraceDataFromSkeletalMeshSocket(struct FVector TraceStart, struct FVector TraceEnd, struct USkeletalMeshComponent* Mesh, struct FRotator TraceRotation, float TraceLength, struct FName Socket, bool DrawTraceData, struct FLinearColor TraceDataColor, float TraceDataThickness); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.TraceData__GetTraceDataFromSkeletalMeshSocket // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb11e40
	bool TraceData__GetTraceDataFromCharacterSocket(struct FVector TraceStart, struct FVector TraceEnd, struct AActor* TheCharacter, struct FRotator TraceRotation, float TraceLength, struct FName Socket, bool DrawTraceData, struct FLinearColor TraceDataColor, float TraceDataThickness); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.TraceData__GetTraceDataFromCharacterSocket // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb11b60
	int32_t Text_ToInt(struct FText Text, bool UseDotForThousands); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb11990
	float Text_ToFloat(struct FText Text, bool UseDotForThousands); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb117a0
	bool Text_IsNumeric(struct FText Text); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_IsNumeric // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb116d0
	bool StringIsEmpty(struct FString Target); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.StringIsEmpty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb10ea0
	void StringConversion__GetFloatAsStringWithPrecision(float TheFloat, struct FString TheString, int32_t Precision, bool IncludeLeadingZero); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.StringConversion__GetFloatAsStringWithPrecision // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb10d20
	void String__ExplodeString(struct TArray<struct FString> OutputStrings, struct FString InputString, struct FString Separator, int32_t Limit, bool bTrimElements); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__ExplodeString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb11460
	struct FString String__CombineStrings_Multi(struct FString A, struct FString B); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings_Multi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb112b0
	struct FString String__CombineStrings(struct FString StringFirst, struct FString StringSecond, struct FString Separator, struct FString StringFirstLabel, struct FString StringSecondLabel); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb10f40
	struct AActor* SpawnActorIntoLevel(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName Level, struct FVector Location, struct FRotator Rotation, bool SpawnEvenIfColliding); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SpawnActorIntoLevel // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb109b0
	void SetGenericTeamId(struct AActor* Target, char NewTeamId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetGenericTeamId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb106c0
	void SetComponentTickRate(struct UActorComponent* Component, float Seconds); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetComponentTickRate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb105f0
	void SetBloomIntensity(struct APostProcessVolume* PostProcessVolume, float Intensity); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetBloomIntensity // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb10420
	void ServerTravel(struct UObject* WorldContextObject, struct FName MapName, bool bSkipNotifyPlayers); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.ServerTravel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb10320
	void Selection_SelectionBox(struct UObject* WorldContextObject, struct TArray<struct AActor*> SelectedActors, struct FVector2D AnchorPoint, struct FVector2D DraggedPoint, struct AActor* ClassFilter); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Selection_SelectionBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb10170
	void seedRandWithTime(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.seedRandWithTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb182b0
	void seedRandWithEntropy(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.seedRandWithEntropy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb18290
	void seedRand(int32_t Seed); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.seedRand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb18210
	bool ScreenShots_Rename_Move_Most_Recent(struct FString OriginalFileName, struct FString NewName, struct FString NewAbsoluteFolderPath, bool HighResolution); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.ScreenShots_Rename_Move_Most_Recent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0ff50
	void SaveGameObject_GetMostRecentSaveSlotFileName(struct FString Filename, bool bFound); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SaveGameObject_GetMostRecentSaveSlotFileName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0fe60
	void SaveGameObject_GetAllSaveSlotFileNames(struct TArray<struct FString> FileNames); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.SaveGameObject_GetAllSaveSlotFileNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0fda0
	void Rendering__UnFreezeGameRendering(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Rendering__UnFreezeGameRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0fab0
	void Rendering__FreezeGameRendering(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Rendering__FreezeGameRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0fa90
	void RemoveAllWidgetsOfClass(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RemoveAllWidgetsOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0f9d0
	void RealWorldTime__GetTimePassedSincePreviousTime(struct FString PreviousTime, float MilliSeconds, float Seconds, float Minutes, float Hours); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetTimePassedSincePreviousTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0f7e0
	void RealWorldTime__GetDifferenceBetweenTimes(struct FString PreviousTime1, struct FString PreviousTime2, float MilliSeconds, float Seconds, float Minutes, float Hours); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetDifferenceBetweenTimes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0f5c0
	struct FString RealWorldTime__GetCurrentOSTime(int32_t MilliSeconds, int32_t Seconds, int32_t Minutes, int32_t Hours12, int32_t Hours24, int32_t Day, int32_t Month, int32_t Year); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetCurrentOSTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0f2b0
	int32_t RandInt_uniDis_MT(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_uniDis_MT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f280
	int32_t RandInt_uniDis(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_uniDis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f250
	int32_t RandInt_MINMAX_uniDis_MT(int32_t iMin, int32_t iMax); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_MINMAX_uniDis_MT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f180
	int32_t RandInt_MINMAX_uniDis(int32_t iMin, int32_t iMax); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_MINMAX_uniDis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f0b0
	float RandFloat_uniDis_MT(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_uniDis_MT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f080
	float RandFloat_uniDis(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_uniDis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0f050
	float RandFloat_MINMAX_uniDis_MT(float iMin, float iMax); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_MINMAX_uniDis_MT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0ef80
	float RandFloat_MINMAX_uniDis(float iMin, float iMax); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_MINMAX_uniDis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0eeb0
	bool RandBool_Bernoulli_MT(float fBias); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandBool_Bernoulli_MT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0ee30
	bool RandBool_Bernoulli(float fBias); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandBool_Bernoulli // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0edb0
	struct FVector2D ProjectWorldToScreenPosition(struct FVector WorldLocation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.ProjectWorldToScreenPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0ed10
	void PointDistanceToPlane(struct FPlane Plane, struct FVector Point, float Distance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.PointDistanceToPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0e940
	struct UAudioComponent* PlaySoundAttachedFromFile(struct FString FilePath, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlaySoundAttachedFromFile // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb0e470
	void PlaySoundAtLocationFromFile(struct UObject* WorldContextObject, struct FString FilePath, struct FVector Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlaySoundAtLocationFromFile // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb0e230
	bool PlayerState_GetPlayerID(struct APlayerController* ThePC, int32_t PlayerId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlayerState_GetPlayerID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0e860
	bool PlayerController_GetControllerID(struct APlayerController* ThePC, int32_t ControllerId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlayerController_GetControllerID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0e780
	bool Physics__UpdateCharacterCameraToRagdollLocation(struct AActor* TheCharacter, float HeightOffset, float InterpSpeed); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__UpdateCharacterCameraToRagdollLocation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0e130
	bool Physics__LeaveRagDoll(struct AActor* TheCharacter, bool SetToFallingMovementMode, float HeightAboveRBMesh, struct FVector InitLocation, struct FRotator InitRotation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__LeaveRagDoll // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0df60
	bool Physics__IsRagDoll(struct AActor* TheCharacter); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__IsRagDoll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0ded0
	bool Physics__InitializeVictoryRagDoll(struct AActor* TheCharacter, struct FVector InitLocation, struct FRotator InitRotation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__InitializeVictoryRagDoll // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0dda0
	bool Physics__GetLocationofRagDoll(struct AActor* TheCharacter, struct FVector RagdollLocation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__GetLocationofRagDoll // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0dcd0
	bool Physics__EnterRagDoll(struct AActor* TheCharacter); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__EnterRagDoll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0dc40
	bool OptionsMenu__GetDisplayAdapterScreenResolutions(struct TArray<int32_t> Widths, struct TArray<int32_t> Heights, struct TArray<int32_t> RefreshRates, bool IncludeRefreshRates); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.OptionsMenu__GetDisplayAdapterScreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0da80
	void OperatingSystem__GetCurrentPlatform(bool Windows_, bool Mac, bool Linux, bool IOS, bool Android, bool Android_ARM, bool Android_Vulkan, bool PS4, bool XboxOne, bool HTML5, bool APPLE); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.OperatingSystem__GetCurrentPlatform // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0d6b0
	void Open_URL_In_Web_Browser(struct FString TheURL); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Open_URL_In_Web_Browser // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0d5d0
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0d4a0
	bool Mobility__SetSceneCompMobility(struct USceneComponent* SceneComp, enum class EComponentMobility NewMobility); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Mobility__SetSceneCompMobility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0d230
	void MinOfIntArray(struct TArray<int32_t> IntArray, int32_t IndexOfMinValue, int32_t MinValue); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0d0f0
	void MinOfFloatArray(struct TArray<float> FloatArray, int32_t IndexOfMinValue, float MinValue); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0cfb0
	void MaxOfIntArray(struct TArray<int32_t> IntArray, int32_t IndexOfMaxValue, int32_t MaxValue); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0ce70
	void MaxOfFloatArray(struct TArray<float> FloatArray, int32_t IndexOfMaxValue, float MaxValue); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0cd30
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0cb80
	void Loops_ResetBPRunawayCounter(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Loops_ResetBPRunawayCounter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0cb60
	struct UTexture2D* LoadTexture2D_FromFileByExtension(struct FString ImagePath, bool IsValid, int32_t OutWidth, int32_t OutHeight); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadTexture2D_FromFileByExtension // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0c9e0
	bool LoadStringFromFile(struct FString Result, struct FString FullFilePath); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringFromFile // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0c870
	bool LoadStringArrayFromFile(struct TArray<struct FString> StringArray, int32_t ArraySize, struct FString FullFilePath, bool ExcludeEmptyLines); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringArrayFromFile // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0c670
	struct UObject* LoadObjectFromAssetPath(struct UObject* ObjectClass, struct FName Path, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadObjectFromAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0c560
	bool LensFlare__GetLensFlareOffsets(struct APlayerController* PlayerController, struct AActor* LightSource, float PitchOffset, float YawOffset, float RollOffset); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.LensFlare__GetLensFlareOffsets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0bf20
	void JoyIsKey(struct FKeyEvent KeyEvent, struct FKey Key, bool CTRL, bool Shift, bool ALT, bool Cmd, bool Match); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyIsKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0bba0
	bool JoyFileIO_GetFilesInRootAndAllSubFolders(struct TArray<struct FString> Files, struct FString RootFolderFullPath, struct FString Ext); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyFileIO_GetFilesInRootAndAllSubFolders // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0b9a0
	bool JoyFileIO_GetFiles(struct TArray<struct FString> Files, struct FString RootFolderFullPath, struct FString Ext); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyFileIO_GetFiles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0b7a0
	bool IsWidgetOfClassInViewport(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsWidgetOfClassInViewport // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0b6d0
	bool IsStandAlone(struct UObject* WorldContextObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsStandAlone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0b620
	bool IsPointOnPlane(struct FPlane Plane, struct FVector Point, float Tolerance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsPointOnPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0b440
	bool IsAlphaNumeric(struct FString String); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsAlphaNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0af40
	struct UPanelSlot* InsertChildAt(struct UWidget* Parent, int32_t Index, struct UWidget* Content); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.InsertChildAt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0ae40
	float HorizontalFOV(float VerticalFOV, float AspectRatio); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.HorizontalFOV // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0ad70
	void HideStreamingLevel(struct ULevelStreamingDynamic* LevelInstance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.HideStreamingLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0acf0
	bool HasSubstring(struct FString SearchIn, struct FString SubString, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.HasSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb0ab70
	void GraphicsSettings__SetFrameRateToBeUnbound(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GraphicsSettings__SetFrameRateToBeUnbound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0aa60
	void GraphicsSettings__SetFrameRateCap(float NewValue); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GraphicsSettings__SetFrameRateCap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb0a9e0
	struct UWidget* GetWidgetFromName(struct UUserWidget* ParentUserWidget, struct FName Name); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetWidgetFromName // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb0a900
	bool GetViewportPositionHitResultByChannel(struct UObject* WorldContextObject, struct FVector2D ViewportPosition, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult OutHitResult); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetViewportPositionHitResultByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0a710
	bool GetViewportPosition(struct UObject* WorldContextObject, struct FVector2D ScreenPosition, struct FVector2D OutViewportPosition); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetViewportPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb0a5f0
	struct FVector GetVectorRelativeLocation(struct FVector ParentLocation, struct FRotator ParentRotation, struct FVector ChildLocation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetVectorRelativeLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0a310
	void GetUTCFromUnixTimeStamp(int32_t UnixTimeStamp, struct FDateTime UTCTime); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUTCFromUnixTimeStamp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb09f60
	void GetUserDisplayAdapterBrand(bool IsAMD, bool IsNvidia, bool IsIntel, bool IsUnknown, int32_t UnknownId); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUserDisplayAdapterBrand // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb0a130
	int32_t GetUnixTimeStamp(struct FDateTime UTCTime); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUnixTimeStamp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb0a060
	float GetTimeInPlay(struct AActor* Actor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetTimeInPlay // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09e90
	float GetTimeAlive(struct AActor* Target); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetTimeAlive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09e00
	bool GetStaticMeshVertexLocations(struct UStaticMeshComponent* Comp, struct TArray<struct FVector> VertexPositions); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetStaticMeshVertexLocations // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb09d10
	struct USoundWave* GetSoundWaveFromFile(struct FString FilePath); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetSoundWaveFromFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb09c70
	struct FRotator GetRotatorRelativeRotation(struct FRotator ParentRotation, struct FRotator ChildRotation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetRotatorRelativeRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb09b70
	int32_t GetPlayerUniqueNetID(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetPlayerUniqueNetID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09b40
	struct APlayerStart* GetPlayerStart(struct UObject* WorldContextObject, struct FString PlayerStartName); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetPlayerStart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb09a10
	struct FName GetObjectPath(struct UObject* Obj); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetObjectPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09980
	void GetNamesOfLoadedLevels(struct UObject* WorldContextObject, struct TArray<struct FString> NamesOfLoadedLevels); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetNamesOfLoadedLevels // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb09870
	struct FName GetHeadMountedDisplayDeviceType(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetHeadMountedDisplayDeviceType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09830
	char GetGenericTeamId(struct AActor* Target); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetGenericTeamId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb097a0
	struct UUserWidget* GetFirstWidgetOfClass(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, bool TopLevelOnly); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetFirstWidgetOfClass // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0xb096a0
	float GetDistanceToCollision(struct UPrimitiveComponent* CollisionComponent, struct FVector Point, struct FVector ClosestPointOnCollision); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetDistanceToCollision // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb09570
	float GetDistanceBetweenComponentSurfaces(struct UPrimitiveComponent* CollisionComponent1, struct UPrimitiveComponent* CollisionComponent2, struct FVector PointOnSurface1, struct FVector PointOnSurface2); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetDistanceBetweenComponentSurfaces // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb09410
	float GetCreationTime(struct AActor* Target); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetCreationTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb09380
	struct FRotator GetComponentRelativeRotation(struct USceneComponent* ParentComponent, struct USceneComponent* ChildComponent); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetComponentRelativeRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb090c0
	struct FVector GetComponentRelativeLocation(struct USceneComponent* ParentComponent, struct USceneComponent* ChildComponent); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetComponentRelativeLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb08fe0
	struct FString GetCommandLine(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb08f00
	struct AActor* GetClosestActorOfClassInRadiusOfLocation(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FVector Center, float Radius, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb08d30
	struct AActor* GetClosestActorOfClassInRadiusOfActor(struct UObject* WorldContextObject, struct AActor* ActorClass, struct AActor* ActorCenter, float Radius, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb08b90
	void GetBoxContainingWorldPoints(struct TArray<struct FVector> Points, struct FVector Center, struct FVector Extent); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetBoxContainingWorldPoints // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb08900
	void GetAllWidgetsOfClass(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, struct TArray<struct UUserWidget*> FoundWidgets, bool TopLevelOnly); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetAllWidgetsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb08790
	int32_t GetAllBoneNamesBelowBone(struct USkeletalMeshComponent* SkeletalMeshComp, struct FName StartingBoneName, struct TArray<struct FName> BoneNames); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetAllBoneNamesBelowBone // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb08660
	struct FRotator GetActorRelativeRotation(struct AActor* ParentActor, struct AActor* ChildActor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetActorRelativeRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb08580
	struct FVector GetActorRelativeLocation(struct AActor* ParentActor, struct AActor* ChildActor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetActorRelativeLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb084a0
	void FlushPressedKeys(struct APlayerController* PlayerController); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.FlushPressedKeys // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb08420
	void FlashGameOnTaskBar(struct APlayerController* PC, bool FlashContinuous, int32_t MaxFlashCount, int32_t FlashFrequencyMilliseconds); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.FlashGameOnTaskBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb082d0
	bool FileIO__SaveStringTextToFile(struct FString SaveDirectory, struct FString JoyfulFileName, struct FString SaveText, bool AllowOverWriting, bool AllowAppend); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringTextToFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb08030
	bool FileIO__SaveStringArrayToFile(struct FString SaveDirectory, struct FString JoyfulFileName, struct TArray<struct FString> SaveText, bool AllowOverWriting, bool AllowAppend); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringArrayToFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb07d20
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb07bf0
	void DrawCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumPoints, float Thickness, struct FLinearColor LineColor, struct FVector YAxis, struct FVector ZAxis, float Duration, bool PersistentLines); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.DrawCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb07370
	void Draw__Thick3DLineFromSocket(struct USkeletalMeshComponent* Mesh, struct FVector EndPoint, struct FName Socket, struct FLinearColor LineColor, float Thickness, float Duration); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineFromSocket // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb07a10
	void Draw__Thick3DLineFromCharacterSocket(struct AActor* TheCharacter, struct FVector EndPoint, struct FName Socket, struct FLinearColor LineColor, float Thickness, float Duration); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineFromCharacterSocket // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb07830
	void Draw__Thick3DLineBetweenActors(struct AActor* StartActor, struct AActor* EndActor, struct FLinearColor LineColor, float Thickness, float Duration); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineBetweenActors // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb07690
	bool DoesMaterialHaveParameter(struct UMaterialInterface* Mat, struct FName Parameter); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.DoesMaterialHaveParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb072a0
	float DistanceToSurface__DistaceOfPointToMeshSurface(struct AStaticMeshActor* TheSMA, struct FVector TestPoint, struct FVector ClosestSurfacePoint); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.DistanceToSurface__DistaceOfPointToMeshSurface // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb07170
	bool Data__GetCharacterBoneLocations(struct AActor* TheCharacter, struct TArray<struct FVector> BoneLocations); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Data__GetCharacterBoneLocations // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb07080
	struct UTextureRenderTarget2D* CreateTextureRenderTarget2D(int32_t Width, int32_t Height, struct FLinearColor ClearColor, float Gamma); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateTextureRenderTarget2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb06e90
	struct UPrimitiveComponent* CreatePrimitiveComponent(struct UObject* WorldContextObject, struct UPrimitiveComponent* CompClass, struct FName Name, struct FVector Location, struct FRotator Rotation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreatePrimitiveComponent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb06cf0
	struct FPlane CreatePlane(struct FVector Center, struct FVector Normal); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreatePlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb06be0
	struct UObject* CreateObject(struct UObject* WorldContextObject, struct UObject* TheObjectClass); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb06b10
	bool CreateMD5Hash(struct FString FileToHash, struct FString FileToStoreHashTo); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateMD5Hash // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb069a0
	int32_t CountOccurrancesOfSubString(struct FString Source, struct FString SubString, enum class ESearchCase SearchCase); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CountOccurrancesOfSubString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb067c0
	struct FRotator Conversions__VectorToRotator(struct FVector TheVector); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__VectorToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb06480
	void Conversions__StringToVector(struct FString String, struct FVector ConvertedVector, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb06350
	void Conversions__StringToRotator(struct FString String, struct FRotator ConvertedRotator, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb06220
	void Conversions__StringToColor(struct FString String, struct FLinearColor ConvertedColor, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb060f0
	struct FVector Conversions__RotatorToVector(struct FRotator TheRotator); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__RotatorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb06050
	void Conversions__ColorToString(struct FLinearColor Color, struct FString ColorAsString); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__ColorToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb05f60
	int32_t Conversion__FloatToRoundedInteger(float IN_Float); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversion__FloatToRoundedInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb05ee0
	void constructRand(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.constructRand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb181f0
	void Component_PrestreamTextures(struct UMeshComponent* Target, float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Component_PrestreamTextures // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb05d80
	bool CompareMD5Hash(struct FString MD5HashFile1, struct FString MD5HashFile2); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CompareMD5Hash // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb05c10
	struct AStaticMeshActor* Clone__StaticMeshActor(struct UObject* WorldContextObject, bool IsValid, struct AStaticMeshActor* ToClone, struct FVector LocationOffset, struct FRotator RotationOffset); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Clone__StaticMeshActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb05330
	bool ClientWindow__GameWindowIsForeGroundInOS(); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.ClientWindow__GameWindowIsForeGroundInOS // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb05300
	bool CharacterMovement__SetMaxMoveSpeed(struct ACharacter* TheCharacter, float NewMaxMoveSpeed); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CharacterMovement__SetMaxMoveSpeed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb05190
	struct FRotator Character__GetControllerRotation(struct AActor* TheCharacter); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Character__GetControllerRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb05260
	bool CaptureComponent2D_SaveImage(struct USceneCaptureComponent2D* Target, struct FString ImagePath, struct FLinearColor ClearColour); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_SaveImage // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb05010
	bool CaptureComponent2D_Project(struct USceneCaptureComponent2D* Target, struct FVector Location, struct FVector2D OutPixelLocation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_Project // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb04ef0
	bool Capture2D_SaveImage(struct ASceneCapture2D* Target, struct FString ImagePath, struct FLinearColor ClearColour); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_SaveImage // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb04d70
	bool Capture2D_Project(struct ASceneCapture2D* Target, struct FVector Location, struct FVector2D OutPixelLocation); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_Project // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb04c50
	float Calcs__ClosestPointToSourcePoint(struct FVector Source, struct TArray<struct FVector> OtherPoints, struct FVector ClosestPoint); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Calcs__ClosestPointToSourcePoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb04af0
	struct FString AppendMultiple(struct FString A, struct FString B); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.AppendMultiple // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb047c0
	bool Animation__GetAimOffsetsFromRotation(struct AActor* AnimBPOwner, struct FRotator TheRotation, float Pitch, float Yaw); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsetsFromRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xb04650
	bool Animation__GetAimOffsets(struct AActor* AnimBPOwner, float Pitch, float Yaw); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb04530
	void AddToActorRotation(struct AActor* TheActor, struct FRotator AddRot); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.AddToActorRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xb04460
	void Actor_PrestreamTextures(struct AActor* Target, float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor_PrestreamTextures // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xb04150
	bool Actor__TeleportToActor(struct AActor* ActorToTeleport, struct AActor* DestinationActor); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor__TeleportToActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb04390
	void Actor__GetAttachedActors(struct AActor* ParentActor, struct TArray<struct AActor*> ActorsArray); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor__GetAttachedActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb042b0
	struct APlayerController* Accessor__GetPlayerController(struct AActor* TheCharacter, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetPlayerController // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb04070
	struct FString Accessor__GetNameAsString(struct UObject* TheObject); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetNameAsString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xb03fa0
	struct USkeletalMeshComponent* Accessor__GetCharacterSkeletalMesh(struct AActor* TheCharacter, bool IsValid); // Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetCharacterSkeletalMesh // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xb03ec0
};

// Class VictoryBPLibrary.VictoryBPHTML
// Size: 0x28 (Inherited: 0x28)
struct UVictoryBPHTML : UBlueprintFunctionLibrary {
};

// Class VictoryBPLibrary.VictoryISM
// Size: 0x228 (Inherited: 0x220)
struct AVictoryISM : AActor {
	struct UInstancedStaticMeshComponent* Mesh; // 0x220(0x08)
};

// Class VictoryBPLibrary.VictoryPC
// Size: 0x570 (Inherited: 0x570)
struct AVictoryPC : APlayerController {

	struct UAudioComponent* VictoryPlaySpeechSound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function VictoryBPLibrary.VictoryPC.VictoryPlaySpeechSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0xb1ac80
	bool VictoryPC_GetMyIP_SendRequest(); // Function VictoryBPLibrary.VictoryPC.VictoryPC_GetMyIP_SendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xb1ac50
	void VictoryPC_GetMyIP_DataReceived(struct FString YourIP); // Function VictoryBPLibrary.VictoryPC.VictoryPC_GetMyIP_DataReceived // (Event|Public|BlueprintEvent) // @ game+0x1395fe0
	void Subtitles_CPPDelegate(struct TArray<struct FSubtitleCue> VictorySubtitles, float CueDuration); // Function VictoryBPLibrary.VictoryPC.Subtitles_CPPDelegate // (Final|Native|Public|HasOutParms) // @ game+0xb1ab00
	void OnVictorySubtitlesQueued(struct TArray<struct FVictorySubtitleCue> VictorySubtitles, float CueDuration); // Function VictoryBPLibrary.VictoryPC.OnVictorySubtitlesQueued // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1395fe0
};

// Class VictoryBPLibrary.VictoryTMapComp
// Size: 0x2e0 (Inherited: 0xb0)
struct UVictoryTMapComp : UActorComponent {
	char pad_B0[0x230]; // 0xb0(0x230)

	void String_Vector__Remove(struct FString Key); // Function VictoryBPLibrary.VictoryTMapComp.String_Vector__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb1aa10
	struct FVector String_Vector__Get(struct FString Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.String_Vector__Get // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb1a8b0
	void String_Vector__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.String_Vector__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a890
	void String_Vector__AddPair(struct FString Key, struct FVector Value); // Function VictoryBPLibrary.VictoryTMapComp.String_Vector__AddPair // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xb1a750
	void String_String__Remove(struct FString Key); // Function VictoryBPLibrary.VictoryTMapComp.String_String__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a660
	struct FString String_String__Get(struct FString Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.String_String__Get // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb1a4d0
	void String_String__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.String_String__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a4b0
	void String_String__AddPair(struct FString Key, struct FString Value); // Function VictoryBPLibrary.VictoryTMapComp.String_String__AddPair // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a330
	void String_Rotator__Remove(struct FString Key); // Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a240
	struct FRotator String_Rotator__Get(struct FString Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__Get // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb1a0e0
	void String_Rotator__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb1a0c0
	void String_Rotator__AddPair(struct FString Key, struct FRotator Value); // Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__AddPair // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xb19f80
	void String_Int__Remove(struct FString Key); // Function VictoryBPLibrary.VictoryTMapComp.String_Int__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb19e90
	int32_t String_Int__Get(struct FString Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.String_Int__Get // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb19d40
	void String_Int__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.String_Int__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb19d20
	void String_Int__AddPair(struct FString Key, int32_t Value); // Function VictoryBPLibrary.VictoryTMapComp.String_Int__AddPair // (Final|Native|Public|BlueprintCallable) // @ game+0xb19bf0
	void String_Actor__Remove(struct FString Key); // Function VictoryBPLibrary.VictoryTMapComp.String_Actor__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb19b00
	struct AActor* String_Actor__Get(struct FString Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.String_Actor__Get // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb199b0
	void String_Actor__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.String_Actor__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb19990
	void String_Actor__AddPair(struct FString Key, struct AActor* Value); // Function VictoryBPLibrary.VictoryTMapComp.String_Actor__AddPair // (Final|Native|Public|BlueprintCallable) // @ game+0xb19860
	void Int_Vector__Remove(int32_t Key); // Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb197d0
	struct FVector Int_Vector__Get(int32_t Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__Get // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xb196e0
	void Int_Vector__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb196c0
	void Int_Vector__AddPair(int32_t Key, struct FVector Value); // Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__AddPair // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xb195e0
	void Int_Float__Remove(int32_t Key, float Value); // Function VictoryBPLibrary.VictoryTMapComp.Int_Float__Remove // (Final|Native|Public|BlueprintCallable) // @ game+0xb19510
	float Int_Float__Get(int32_t Key, bool IsValid); // Function VictoryBPLibrary.VictoryTMapComp.Int_Float__Get // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xb19430
	void Int_Float__Clear(); // Function VictoryBPLibrary.VictoryTMapComp.Int_Float__Clear // (Final|Native|Public|BlueprintCallable) // @ game+0xb19410
	void Int_Float__AddPair(int32_t Key, float Value); // Function VictoryBPLibrary.VictoryTMapComp.Int_Float__AddPair // (Final|Native|Public|BlueprintCallable) // @ game+0xb19340
};

